// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/4chain-ag/go-wallet-toolbox/pkg/wdk (interfaces: WalletStorageWriter)
//
// Generated by this command:
//
//	mockgen -destination=../internal/mocks/mock_wallet_storage_writer.go -package=mocks github.com/4chain-ag/go-wallet-toolbox/pkg/wdk WalletStorageWriter
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	wdk "github.com/4chain-ag/go-wallet-toolbox/pkg/wdk"
	gomock "go.uber.org/mock/gomock"
)

// MockWalletStorageWriter is a mock of WalletStorageWriter interface.
type MockWalletStorageWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWalletStorageWriterMockRecorder
	isgomock struct{}
}

// MockWalletStorageWriterMockRecorder is the mock recorder for MockWalletStorageWriter.
type MockWalletStorageWriterMockRecorder struct {
	mock *MockWalletStorageWriter
}

// NewMockWalletStorageWriter creates a new mock instance.
func NewMockWalletStorageWriter(ctrl *gomock.Controller) *MockWalletStorageWriter {
	mock := &MockWalletStorageWriter{ctrl: ctrl}
	mock.recorder = &MockWalletStorageWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletStorageWriter) EXPECT() *MockWalletStorageWriterMockRecorder {
	return m.recorder
}

// CreateAction mocks base method.
func (m *MockWalletStorageWriter) CreateAction(ctx context.Context, auth wdk.AuthID, args wdk.ValidCreateActionArgs) (*wdk.StorageCreateActionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAction", ctx, auth, args)
	ret0, _ := ret[0].(*wdk.StorageCreateActionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAction indicates an expected call of CreateAction.
func (mr *MockWalletStorageWriterMockRecorder) CreateAction(ctx, auth, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAction", reflect.TypeOf((*MockWalletStorageWriter)(nil).CreateAction), ctx, auth, args)
}

// FindOrInsertUser mocks base method.
func (m *MockWalletStorageWriter) FindOrInsertUser(ctx context.Context, identityKey string) (*wdk.FindOrInsertUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrInsertUser", ctx, identityKey)
	ret0, _ := ret[0].(*wdk.FindOrInsertUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrInsertUser indicates an expected call of FindOrInsertUser.
func (mr *MockWalletStorageWriterMockRecorder) FindOrInsertUser(ctx, identityKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrInsertUser", reflect.TypeOf((*MockWalletStorageWriter)(nil).FindOrInsertUser), ctx, identityKey)
}

// InsertCertificateAuth mocks base method.
func (m *MockWalletStorageWriter) InsertCertificateAuth(ctx context.Context, auth wdk.AuthID, certificate *wdk.TableCertificateX) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCertificateAuth", ctx, auth, certificate)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertCertificateAuth indicates an expected call of InsertCertificateAuth.
func (mr *MockWalletStorageWriterMockRecorder) InsertCertificateAuth(ctx, auth, certificate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCertificateAuth", reflect.TypeOf((*MockWalletStorageWriter)(nil).InsertCertificateAuth), ctx, auth, certificate)
}

// ListCertificates mocks base method.
func (m *MockWalletStorageWriter) ListCertificates(ctx context.Context, auth wdk.AuthID, args wdk.ListCertificatesArgs) (*wdk.ListCertificatesResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCertificates", ctx, auth, args)
	ret0, _ := ret[0].(*wdk.ListCertificatesResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCertificates indicates an expected call of ListCertificates.
func (mr *MockWalletStorageWriterMockRecorder) ListCertificates(ctx, auth, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCertificates", reflect.TypeOf((*MockWalletStorageWriter)(nil).ListCertificates), ctx, auth, args)
}

// MakeAvailable mocks base method.
func (m *MockWalletStorageWriter) MakeAvailable(ctx context.Context) (*wdk.TableSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeAvailable", ctx)
	ret0, _ := ret[0].(*wdk.TableSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeAvailable indicates an expected call of MakeAvailable.
func (mr *MockWalletStorageWriterMockRecorder) MakeAvailable(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeAvailable", reflect.TypeOf((*MockWalletStorageWriter)(nil).MakeAvailable), ctx)
}

// Migrate mocks base method.
func (m *MockWalletStorageWriter) Migrate(ctx context.Context, storageName, storageIdentityKey string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migrate", ctx, storageName, storageIdentityKey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Migrate indicates an expected call of Migrate.
func (mr *MockWalletStorageWriterMockRecorder) Migrate(ctx, storageName, storageIdentityKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockWalletStorageWriter)(nil).Migrate), ctx, storageName, storageIdentityKey)
}

// RelinquishCertificate mocks base method.
func (m *MockWalletStorageWriter) RelinquishCertificate(ctx context.Context, auth wdk.AuthID, args wdk.RelinquishCertificateArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelinquishCertificate", ctx, auth, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// RelinquishCertificate indicates an expected call of RelinquishCertificate.
func (mr *MockWalletStorageWriterMockRecorder) RelinquishCertificate(ctx, auth, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelinquishCertificate", reflect.TypeOf((*MockWalletStorageWriter)(nil).RelinquishCertificate), ctx, auth, args)
}
