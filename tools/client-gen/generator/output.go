package generator

import (
	"bytes"
	_ "embed"
	"go/format"
	"log"
	"text/template"

	"github.com/4chain-ag/go-wallet-toolbox/tools/client-gen/extractor"
)

//go:embed client.tpl
var goCodeTemplate string

func Generate(packageName string, fullPackageName string, isSamePackage bool, interfaces []extractor.InterfaceInfo) []byte {
	// Generate Go code using the template
	tmpl, err := template.New("gocode").Parse(goCodeTemplate)
	if err != nil {
		log.Fatalf("Failed to parse template: %v", err)
	}

	var buf bytes.Buffer
	buf.WriteString("// Code generated by client-gen; DO NOT EDIT.\n\n")

	data := struct {
		IsSamePackage bool
		Package       string
		FullPackage   string
		Interfaces    []extractor.InterfaceInfo
	}{
		Package:       packageName,
		FullPackage:   fullPackageName,
		Interfaces:    interfaces,
		IsSamePackage: isSamePackage,
	}

	if err := tmpl.Execute(&buf, data); err != nil {
		log.Fatalf("Failed to execute template: %v", err)
	}

	// Format the generated code
	formattedCode, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatalf("Failed to format generated code: %v", err)
	}

	return formattedCode
}
